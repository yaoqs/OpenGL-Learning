// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "toolbarcontroldefault.h"

// Dispatch interfaces referenced by this interface
#include "picture.h"

/////////////////////////////////////////////////////////////////////////////
// CToolbarControlDefault

IMPLEMENT_DYNCREATE(CToolbarControlDefault, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CToolbarControlDefault properties

/////////////////////////////////////////////////////////////////////////////
// CToolbarControlDefault operations

void CToolbarControlDefault::SetBorderStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CToolbarControlDefault::GetBorderStyle()
{
	long result;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CToolbarControlDefault::GetEnabled()
{
	BOOL result;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetAppearance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CToolbarControlDefault::GetAppearance()
{
	long result;
	InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetMousePointer(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfffffdf7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CToolbarControlDefault::GetMousePointer()
{
	long result;
	InvokeHelper(0xfffffdf7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetRefMouseIcon(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xfffffdf6, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

CPicture CToolbarControlDefault::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xfffffdf6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

long CToolbarControlDefault::GetHWnd()
{
	long result;
	InvokeHelper(DISPID_HWND, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CToolbarControlDefault::AddItem(const VARIANT& CommandOrMenu, long subtype, long index, BOOL beginGroup, long GroupSpacing, long Style)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4 VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&CommandOrMenu, subtype, index, beginGroup, GroupSpacing, Style);
	return result;
}

void CToolbarControlDefault::Remove(long index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index);
}

void CToolbarControlDefault::RemoveAll()
{
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPUNKNOWN CToolbarControlDefault::GetItem(long index)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		index);
	return result;
}

long CToolbarControlDefault::GetCount()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::Update(long index, BOOL fullUpdate)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, fullUpdate);
}

LPDISPATCH CToolbarControlDefault::GetBuddy()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPUNKNOWN CToolbarControlDefault::GetCurrentTool()
{
	LPUNKNOWN result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetRefCurrentTool(LPUNKNOWN newValue)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CToolbarControlDefault::GetToolTips()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetToolTips(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CToolbarControlDefault::GetItemAppearance()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetItemAppearance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CToolbarControlDefault::GetUpdateInterval()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetUpdateInterval(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CToolbarControlDefault::Find(const VARIANT& CommandOrMenu)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&CommandOrMenu);
	return result;
}

LPUNKNOWN CToolbarControlDefault::GetCommandPool()
{
	LPUNKNOWN result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetRefCommandPool(LPUNKNOWN newValue)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

long CToolbarControlDefault::AddToolbarDef(const VARIANT& ToolbarDef, long startIndex, BOOL Group, long GroupSpacing, long Style)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&ToolbarDef, startIndex, Group, GroupSpacing, Style);
	return result;
}

long CToolbarControlDefault::GetTextAlignment()
{
	long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetTextAlignment(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CToolbarControlDefault::GetLargeIcons()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetLargeIcons(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CToolbarControlDefault::GetCustomize()
{
	BOOL result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetCustomize(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CToolbarControlDefault::MoveItem(long startIndex, long finalIndex)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 startIndex, finalIndex);
}

long CToolbarControlDefault::HitTest(long x, long y, BOOL nearest)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, nearest);
	return result;
}

void CToolbarControlDefault::GetItemRect(long index, long* Top, long* Left, long* Bottom, long* Right)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, Top, Left, Bottom, Right);
}

LPUNKNOWN CToolbarControlDefault::GetOperationStack()
{
	LPUNKNOWN result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetRefOperationStack(LPUNKNOWN newValue)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

VARIANT CToolbarControlDefault::GetCustomProperty()
{
	VARIANT result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetCustomProperty(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void CToolbarControlDefault::SetBuddyControl(LPDISPATCH pToolbarBuddy)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pToolbarBuddy);
}

BOOL CToolbarControlDefault::GetMenuTracking()
{
	BOOL result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetMenuTracking(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CToolbarControlDefault::AddMenuItem(const VARIANT& Menu, long index, BOOL beginGroup, long GroupSpacing)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_BOOL VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Menu, index, beginGroup, GroupSpacing);
	return result;
}

LPDISPATCH CToolbarControlDefault::GetObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long CToolbarControlDefault::GetKeyIntercept()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CToolbarControlDefault::SetKeyIntercept(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}
